/* tslint:disable */
/* eslint-disable */
import { RegisterRoutes } from "@/routes/routes"; // Import the 'routes' file generated by tsoa
import { NextApiRequest, NextApiResponse } from "next";
import { handleError } from "@/lib/error";

/** Function signature for route callbacks */
type FN = (request: any, response: any, next: any) => void;

type PathsToFns = { [path: string]: readonly FN[] };

/** Map from method to path to the route handling callbacks */
const methodToPathToFns: {
    readonly [method: string]: PathsToFns;
} = {
    get: {},
    post: {},
};

function isMatch(req: NextApiRequest, path: string, params: string[]): boolean {
    const candidate = path.slice(1).split("/");
    if (candidate.length !== params.length) return false;
    for (let index = 0; index < params.length; index++) {
        if (
            !(candidate[index].startsWith(":") || candidate[index] === params[index])
        )
            return false;
    }

    // it was a match so now we add params
    for (let index = 0; index < params.length; index++) {
        if (candidate[index].startsWith(":"))
            // @ts-expect-error we are adding params
            // TODO: cast to correct type but can't know how to
            req.params = { [candidate[index].slice(1)]: params[index] };
    }
    return true;
}

function getFunctions(req: NextApiRequest): readonly FN[] {
    const method = req.method?.toLowerCase();
    const params = req.query.catchall;
    if (!Array.isArray(params)) throw new Error(`params not an array: ${params}`);
    if (!method) throw new Error(`method not defined: ${method}`);

    const pathsToFns: PathsToFns = methodToPathToFns[method] || {};
    for (const path of Object.keys(pathsToFns)) {
        const pathWithoutAPI = `/${path.split("/").filter((el) => el !== 'api').filter(Boolean).join("/")}`;
        if (isMatch(req, pathWithoutAPI, params)) {
            return pathsToFns[path];
        }
    }
    return [];
}

/** Indicate whether setup() has been called yet */
let ready = false;

export default async function handler(
    req: NextApiRequest,
    res: NextApiResponse
): Promise<void> {
    if (!ready) {
        setup();
        ready = true;
    }

    const fns = getFunctions(req);

    if (!fns) {
        console.log("Not found");
        res.status(404).send("Not found");
    } else if (fns.length === 0) {
        res.status(404).send("Not found");
    } else {
        return new Promise((resolve, reject) => {
            let i = 0;
            const next = (err?: any) => {
                if (err) {
                    return handleError(err, res, req);
                } else if (i < fns.length) {
                    fns[i++](req, res, next);
                } else {
                    resolve();
                }
            };
            next();
        });
    }
}

/**
 * Call the `RegisterRoutes()` function generated by tsoa.
 * `RegisterRoutes()` expects to be passed an express app, so mock the required functions (e.g. get, post, etc)
 * in order to record our own list of methods/paths/callbacks.
 */
function setup(): void {
    const app = {
        get: (path: string, ...fns: readonly FN[]) => {
            methodToPathToFns["get"][path] = fns;
        },
        post: (path: string, ...fns: readonly FN[]) => {
            methodToPathToFns["post"][path] = fns;
        },
    };
    RegisterRoutes(app as any);
    // console.log("methodToPathToFns:", methodToPathToFns);
}